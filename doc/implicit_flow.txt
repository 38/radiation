I've notice that the control flow may have impilcit dataflows, and the
implicit dataflow can be transferred to explict one in branches.
e.g.:
1	a = 1
2	if(b > 2) {
3		a = 2
4	}
5	

In line 5, the value of a actually also carries the information of the if
condition expression. (a == 2 means b > 2 must be true)

And this also shows that even if the variable is remain untouched (e.g the
else branch in the example program), the implicit dataflow will flow to the
variable a. 

That means basically if we want to track the implicit flow, we have to examine
all branch even the branch is not to be executed this time. 

This is difficult because it can lead the program analysis never teminates. 

One brute-force solution is mark all dataflow "contaiminated" by any branches.
But this can make the output so huge.

A better solution is:

Because JavaScript accesses the variable by name. (That means only the name
mentioned in the program and the object associated with the name on runtime
can be touched. That means, only all object that referred by the parent scope
veriables mentiond in the program, of course include the function called in 
the branch, can be affected by this branch. 
Hopefully that will reduce the size of "contaiminated set".

e.g.
	function f(x) {
		if(x > 0) c[x] = f(x - 1)
		else c[x] = 1
		return c[x] + 1
	}
	a = 1
	if(b > 2) {
		a = 5;
		f(b);
	}

In this case, the contaiminated set is {a,c, *c}.  (*c means the object
	referred by c).


==Update

But once the function is actually a part of the dataflow, this procedure might
not be able to know all the possible code to execute and makes the procedure
fail to figure out what dataflow may containminated by the control flow.

Another example for this case is an array of function. And we call one of
those functions by the index in the array. This is also another instance of
implicit dataflow, but in this case we should have all functions in the array
analyzed using this method. Because it's equivalent to a branch
